{"version":3,"sources":["Handle.js","Track.js","CustomSlider.js","App.js","serviceWorker.js","index.js"],"names":["Handle","_ref","_ref$handle","handle","id","percent","value","getHandleProps","react_default","a","createElement","Object","assign","style","left","concat","position","marginLeft","marginTop","zIndex","width","height","border","textAlign","cursor","borderRadius","backgroundColor","color","Track","source","target","getTrackProps","sliderStyle","padding","railStyle","CustomSlider","domain","step","values","onUpdate","es","rootStyle","mode","_ref2","getRailProps","_ref3","handles","className","map","key","right","_ref4","tracks","_ref5","YEARLY_INTEREST_RATE","App","state","amount","period","pluralize","count","singular","plural","monthlyPayments","pv","n","r","Math","pow","totalWithInterest","_this","interestPayments","_this2","this","react","setState","toFixed","src","process","alt","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6QAEO,SAASA,EAATC,GAGmB,IAAAC,EAAAD,EAFCE,OAASC,EAEVF,EAFUE,GAAWC,GAErBH,EAFcI,MAEdJ,EAFqBG,SACpBE,EACDN,EADCM,eAEvB,OACIC,EAAAC,EAAAC,cAAA,MAAAC,OAAAC,OAAA,CACIC,MAAO,CACHC,KAAI,GAAAC,OAAKV,EAAL,KACJW,SAAU,WACVC,YAAa,GACbC,UAAW,EACXC,OAAQ,EACRC,MAAO,GACPC,OAAQ,GACRC,OAAQ,EACRC,UAAW,SACXC,OAAQ,UACRC,aAAc,MACdC,gBAAiB,UACjBC,MAAO,SAEPpB,EAAeH,KCpBxB,SAASwB,EAAT3B,GAAgD,IAAhC4B,EAAgC5B,EAAhC4B,OAAQC,EAAwB7B,EAAxB6B,OAAQC,EAAgB9B,EAAhB8B,cACnC,OACIvB,EAAAC,EAAAC,cAAA,MAAAC,OAAAC,OAAA,CACIC,MAAO,CACHG,SAAU,WACVK,OAAQ,GACRF,OAAQ,EACRD,UAAW,GACXQ,gBAAiB,UACjBD,aAAc,EACdD,OAAQ,UACRV,KAAI,GAAAC,OAAKc,EAAOxB,QAAZ,KACJe,MAAK,GAAAL,OAAKe,EAAOzB,QAAUwB,EAAOxB,QAA7B,OAEL0B,MCZhB,IAAMC,EAAc,CAChBhB,SAAU,WACVI,MAAO,OACPa,QAAS,QACTZ,OAAQ,IAGNa,EAAY,CACdlB,SAAU,WACVI,MAAO,OACPC,OAAQ,GACRH,UAAW,GACXO,aAAc,EACdC,gBAAiB,WAGd,SAASS,EAATlC,GAAwD,IAAjCmC,EAAiCnC,EAAjCmC,OAAQC,EAAyBpC,EAAzBoC,KAAMC,EAAmBrC,EAAnBqC,OAAQC,EAAWtC,EAAXsC,SAChD,OACI/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CACIC,UAAWT,EACXI,OAAQA,EACRC,KAAMA,EACNK,KAAM,EACNJ,OAAQA,EACRC,SAAUA,GACV/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,KACK,SAAAG,GAAA,IAAEC,EAAFD,EAAEC,aAAF,OACGpC,EAAAC,EAAAC,cAAA,MAAAC,OAAAC,OAAA,CAAKC,MAAOqB,GAAeU,QAGnCpC,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,KACK,SAAAK,GAAA,IAAEC,EAAFD,EAAEC,QAASvC,EAAXsC,EAAWtC,eAAX,OACGC,EAAAC,EAAAC,cAAA,OAAKqC,UAAU,kBACVD,EAAQE,IAAI,SAAA7C,GAAM,OACfK,EAAAC,EAAAC,cAACV,EAAD,CACIiD,IAAK9C,EAAOC,GACZD,OAAQA,EACRI,eAAgBA,SAMpCC,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAQU,OAAO,GACV,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,OAAQrB,EAAVoB,EAAUpB,cAAV,OACGvB,EAAAC,EAAAC,cAAA,OAAKqC,UAAU,iBACVK,EAAOJ,IAAI,SAAAK,GAAA,IAAEjD,EAAFiD,EAAEjD,GAAIyB,EAANwB,EAAMxB,OAAQC,EAAduB,EAAcvB,OAAd,OACRtB,EAAAC,EAAAC,cAACkB,EAAD,CACIqB,IAAK7C,EACLyB,OAAQA,EACRC,OAAQA,EACRC,cAAeA,UCnD/C,IAAMuB,EAAuB,IA6GdC,6MAzGXC,MAAQ,CACJC,OAAQ,IACRC,OAAQ,MAGZC,UAAY,SAACC,EAAOC,EAAUC,GAC1B,OAAkB,IAAVF,EAAeC,EAAWC,KAWtCC,gBAAkB,SAACC,EAAIC,GACnB,IAAIC,EAAIZ,EAAuB,GAI/B,OAFSY,EAAIF,GAAO,EAAIG,KAAKC,IAAK,EAAIF,GAAMD,OAKhDI,kBAAoB,SAACL,EAAIC,GACrB,OAAOK,EAAKP,gBAAgBC,EAAIC,GAAKA,KAGzCM,iBAAmB,SAACP,EAAIC,GACpB,OAAOK,EAAKD,kBAAkBL,EAAIC,GAAKK,EAAKd,MAAMC,gFAG7C,IAAAe,EAAAC,KACL,OACIjE,EAAAC,EAAAC,cAACgE,EAAA,SAAD,KACIlE,EAAAC,EAAAC,cAAA,OAAKqC,UAAU,QACXvC,EAAAC,EAAAC,cAAA,UAAQqC,UAAU,uBACdvC,EAAAC,EAAAC,cAAA,QAAMqC,UAAU,mBAAhB,WACAvC,EAAAC,EAAAC,cAAA,QAAMqC,UAAU,gBAAhB,UAEJvC,EAAAC,EAAAC,cAAA,OAAKqC,UAAU,eACXvC,EAAAC,EAAAC,cAAA,OAAKqC,UAAU,eAAf,6BACoBvC,EAAAC,EAAAC,cAAA,QAAMqC,UAAU,wBAAwB0B,KAAKjB,MAAMC,OAAnD,SAEpBjD,EAAAC,EAAAC,cAACyB,EAAD,CAAcC,OAAQ,CAAC,IAAK,KACdC,KAAM,IACNC,OAAQ,CAACmC,KAAKjB,MAAMC,QACpBlB,SAAU,SAACD,GACPkC,EAAKG,SAAS,CAAClB,OAAQnB,EAAO,QAEhD9B,EAAAC,EAAAC,cAAA,OAAKqC,UAAU,eAAf,MACOvC,EAAAC,EAAAC,cAAA,QACHqC,UAAU,wBAAwB0B,KAAKjB,MAAME,OAD1C,KAC0De,KAAKd,UAAUc,KAAKjB,MAAME,OAAQ,cAAU,uBAE7GlD,EAAAC,EAAAC,cAACyB,EAAD,CAAcC,OAAQ,CAAC,EAAG,IACZC,KAAM,EACNC,OAAQ,CAACmC,KAAKjB,MAAME,QACpBnB,SAAU,SAACD,GACPkC,EAAKG,SAAS,CAACjB,OAAQpB,EAAO,QAEhD9B,EAAAC,EAAAC,cAAA,OAAKqC,UAAU,gBACXvC,EAAAC,EAAAC,cAAA,OAAKqC,UAAU,oBACXvC,EAAAC,EAAAC,cAAA,OAAKqC,UAAU,0BAAf,sCAGAvC,EAAAC,EAAAC,cAAA,OAAKqC,UAAU,2BACV0B,KAAKV,gBAAgBU,KAAKjB,MAAMC,OAAQgB,KAAKjB,MAAME,QAAQkB,QAAQ,GADxE,SAIJpE,EAAAC,EAAAC,cAAA,OAAKqC,UAAU,oBACXvC,EAAAC,EAAAC,cAAA,OAAKqC,UAAU,0BAAf,6BAGAvC,EAAAC,EAAAC,cAAA,OAAKqC,UAAU,2BACV0B,KAAKJ,kBAAkBI,KAAKjB,MAAMC,OAAQgB,KAAKjB,MAAME,QAAQkB,QAAQ,GAD1E,SAIJpE,EAAAC,EAAAC,cAAA,OAAKqC,UAAU,oBACXvC,EAAAC,EAAAC,cAAA,OAAKqC,UAAU,0BAAf,0BAGAvC,EAAAC,EAAAC,cAAA,OAAKqC,UAAU,2BACV0B,KAAKF,iBAAiBE,KAAKjB,MAAMC,OAAQgB,KAAKjB,MAAME,QAAQkB,QAAQ,GADzE,WAMZpE,EAAAC,EAAAC,cAAA,OAAKqC,UAAU,cACXvC,EAAAC,EAAAC,cAAA,OAAKqC,UAAU,QACXvC,EAAAC,EAAAC,cAAA,OAAKmE,IAAG,GAAA9D,OAAK+D,kBAAL,iBAA4CC,IAAI,+BAAqBhC,UAAU,mBAInGvC,EAAAC,EAAAC,cAAA,UAAQqC,UAAU,UACdvC,EAAAC,EAAAC,cAAA,KAAGqC,UAAU,eACTiC,KAAK,+CADT,6DAjGFC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhF,EAAAC,EAAAC,cAAC+E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5da5320f.chunk.js","sourcesContent":["import React from \"react\";\n\nexport function Handle({\n                           handle: {id, value, percent},\n                           getHandleProps\n                       }) {\n    return (\n        <div\n            style={{\n                left: `${percent}%`,\n                position: 'absolute',\n                marginLeft: -15,\n                marginTop: 5,\n                zIndex: 2,\n                width: 30,\n                height: 30,\n                border: 0,\n                textAlign: 'center',\n                cursor: 'pointer',\n                borderRadius: '50%',\n                backgroundColor: '#2C4870',\n                color: '#fff',\n            }}\n            {...getHandleProps(id)}\n        >\n        </div>\n    )\n}\n","import React from \"react\";\n\n\nexport function Track({source, target, getTrackProps}) { // your own track component\n    return (\n        <div\n            style={{\n                position: 'absolute',\n                height: 10,\n                zIndex: 1,\n                marginTop: 15,\n                backgroundColor: '#26768A',\n                borderRadius: 2,\n                cursor: 'pointer',\n                left: `${source.percent}%`,\n                width: `${target.percent - source.percent}%`,\n            }}\n            {...getTrackProps()} // this will set up events if you want it to be clickeable (optional)\n        />\n    )\n}","import React from 'react'\nimport {Handles, Rail, Slider, Tracks} from \"react-compound-slider\";\nimport {Handle} from \"./Handle\";\nimport {Track} from \"./Track\";\n\nconst sliderStyle = {  // Give the slider some width\n    position: 'relative',\n    width: '100%',\n    padding: '0 5px',\n    height: 40,\n};\n\nconst railStyle = {\n    position: 'absolute',\n    width: '100%',\n    height: 10,\n    marginTop: 15,\n    borderRadius: 2,\n    backgroundColor: '#2AB7CA',\n};\n\nexport function CustomSlider({domain, step, values, onUpdate}) {\n    return (\n        <Slider\n            rootStyle={sliderStyle}\n            domain={domain}\n            step={step}\n            mode={2}\n            values={values}\n            onUpdate={onUpdate}>\n            <Rail>\n                {({getRailProps}) => (\n                    <div style={railStyle} {...getRailProps()} />\n                )}\n            </Rail>\n            <Handles>\n                {({handles, getHandleProps}) => (\n                    <div className=\"slider-handles\">\n                        {handles.map(handle => (\n                            <Handle\n                                key={handle.id}\n                                handle={handle}\n                                getHandleProps={getHandleProps}\n                            />\n                        ))}\n                    </div>\n                )}\n            </Handles>\n            <Tracks right={false}>\n                {({tracks, getTrackProps}) => (\n                    <div className=\"slider-tracks\">\n                        {tracks.map(({id, source, target}) => (\n                            <Track\n                                key={id}\n                                source={source}\n                                target={target}\n                                getTrackProps={getTrackProps}\n                            />\n                        ))}\n                    </div>\n                )}\n            </Tracks>\n        </Slider>)\n}","import React, {Component, Fragment} from 'react';\n\nimport './App.scss';\nimport {CustomSlider} from \"./CustomSlider\";\n\nconst YEARLY_INTEREST_RATE = 0.05;\n\nclass App extends Component {\n\n    state = {\n        amount: 1000,\n        period: 12\n    };\n\n    pluralize = (count, singular, plural) => {\n        return (count === 1) ? singular : plural;\n    };\n\n    /*\n    * P = (r * (PV)) / (1 - (1 + r)^(-n))\n    *\n    * P - Payment\n    * PV - Present Value\n    * r - rate per period\n    * n - number of periods\n    * */\n    monthlyPayments = (pv, n) => {\n        let r = YEARLY_INTEREST_RATE / 12;\n\n        let p = (r * pv) / (1 - Math.pow((1 + r), (-n)));\n\n        return p;\n    };\n\n    totalWithInterest = (pv, n) => {\n        return this.monthlyPayments(pv, n) * n;\n    };\n\n    interestPayments = (pv, n) => {\n        return this.totalWithInterest(pv, n) - this.state.amount;\n    };\n\n    render() {\n        return (\n            <Fragment>\n                <div className=\"main\">\n                    <header className=\"header main__header\">\n                        <span className=\"header__osvalds\">osvalds</span>\n                        <span className=\"header__loan\">.loan</span>\n                    </header>\n                    <div className=\"main__right\">\n                        <div className=\"loan-header\">\n                            Es vēlos saņemt <span className=\"loan-header__special\">{this.state.amount} EUR</span>\n                        </div>\n                        <CustomSlider domain={[500, 8000]}\n                                      step={100}\n                                      values={[this.state.amount]}\n                                      onUpdate={(values) => {\n                                          this.setState({amount: values[0]})\n                                      }}/>\n                        <div className=\"loan-header\">\n                            Uz <span\n                            className=\"loan-header__special\">{this.state.period} </span>{this.pluralize(this.state.period, \"mēnesi\", \"mēnešiem\")}\n                        </div>\n                        <CustomSlider domain={[1, 24]}\n                                      step={1}\n                                      values={[this.state.period]}\n                                      onUpdate={(values) => {\n                                          this.setState({period: values[0]})\n                                      }}/>\n                        <div className=\"loan-wrapper\">\n                            <div className=\"loan-description\">\n                                <div className=\"loan-description__left\">\n                                    Ikmēneša maksājums:\n                                </div>\n                                <div className=\"loan-description__right\">\n                                    {this.monthlyPayments(this.state.amount, this.state.period).toFixed(2)} EUR\n                                </div>\n                            </div>\n                            <div className=\"loan-description\">\n                                <div className=\"loan-description__left\">\n                                    Galā samaksāsi:\n                                </div>\n                                <div className=\"loan-description__right\">\n                                    {this.totalWithInterest(this.state.amount, this.state.period).toFixed(2)} EUR\n                                </div>\n                            </div>\n                            <div className=\"loan-description\">\n                                <div className=\"loan-description__left\">\n                                    Es nopelnīšu\n                                </div>\n                                <div className=\"loan-description__right\">\n                                    {this.interestPayments(this.state.amount, this.state.period).toFixed(2)} EUR\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"main__left\">\n                        <div className=\"hero\">\n                            <img src={`${process.env.PUBLIC_URL}/img/hero.jpg`} alt=\"Piķis nav problēma\" className=\"hero__image\"/>\n                        </div>\n                    </div>\n                </div>\n                <footer className=\"footer\">\n                    <a className=\"footer__link\"\n                        href=\"https://www.youtube.com/watch?v=UROLAsyc_KU\">\n                        💰💰💰💰\n                    </a>\n                </footer>\n            </Fragment>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}